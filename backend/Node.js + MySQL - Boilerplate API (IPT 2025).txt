Node.js + MySQL - Boilerplate API with
Email Sign Up, Verification,
Authentication & Forgot Password
How to build a boilerplate sign up and authentication API with Node.js and
MySQL that includes:
●​ Email sign up and verification
●​ JWT authentication with refresh tokens
●​ Role based authorization with support for two roles (User & Admin)
●​ Forgot password and reset password functionality
●​ Account management (CRUD) routes with role based access control
●​ Swagger api documentation route

Node + MySQL Boilerplate Overview
There are no users registered in the node.js boilerplate api by default, in order
to authenticate you must first register and verify an account. The api sends a
verification email after registration with a token to verify the account. Email
SMTP settings must be set in the config.json file for email to work correctly,
you can create a free test account in one click at https://ethereal.email/ and
copy the options below the title Nodemailer configuration.

The first account registered is assigned to the Admin role and subsequent
accounts are assigned to the regular User role. Admins have full access to
CRUD routes for managing all accounts, while regular users can only modify
their own account.

JWT authentication with refresh tokens
Authentication is implemented with JWT access tokens and refresh tokens.
On successful authentication the boilerplate api returns a short lived JWT
access token that expires after 15 minutes, and a refresh token that expires
after 7 days in a HTTP Only cookie. The JWT is used for accessing secure
routes on the api and the refresh token is used for generating new JWT
access tokens when (or just before) they expire. HTTP Only cookies are used
for increased security because they are not accessible to client-side javascript
which prevents XSS (cross site scripting), and the refresh token can only be
used to fetch a new JWT token from the /accounts/refresh-token route
which prevents CSRF (cross site request forgery).

Refresh token rotation
As an added security measure in the refreshToken() method of the account
service, each time a refresh token is used to generate a new JWT token, the
refresh token is revoked and replaced by a new refresh token. This technique
is known as Refresh Token Rotation and increases security by reducing the
lifetime of refresh tokens, which makes it less likely that a compromised token
will be valid (or valid for long). When a refresh token is rotated the new token
is saved in the replacedByToken property of the revoked token to create an
audit trail in the MySQL database.

Node.js + MySQL
Project Structure

Boilerplate

API

This project is structured into feature folders (accounts) and non-feature /
shared component folders (_helpers, _middleware). Shared component
folders contain code that can be used by multiple features and other parts of
the application, and are prefixed with an underscore _ to group them
together and make it easy to differentiate between feature folders and
non-feature folders.

The boilerplate example only contains a single (accounts) feature at the
moment, but could be easily extended with other features by copying the
accounts folder and following the same pattern.

Project structure:

Helpers Folder
Path: /_helpers

The helpers folder contains all the bits and pieces that don't fit into other
folders but don't justify having a folder of their own.

MySQL Database Wrapper
Path: /_helpers/db.js

The MySQL database wrapper connects to MySQL using Sequelize and the
MySQL2 client, and exports an object containing all of the database model

objects in the application (currently only Account and RefreshToken). It
provides an easy way to access any part of the database from a single point.

The initialize() function is executed once on api startup and performs the
following actions:

●​ Connects to MySQL server using the mysql2 db client and executes a
query to create the database if it doesn't already exist.
●​ Connects to the database with the Sequelize ORM.
●​ Initializes the Account and RefreshToken models and attaches them to
the exported db object.
●​ Defines the one-to-many relationship between accounts and refresh
tokens and configures refresh tokens to be deleted when the account
they belong to is deleted.
●​ Automatically creates tables in MySQL database if they don't exist by
calling await sequelize.sync(). For more info on Sequelize model
synchronization options see
https://sequelize.org/master/manual/model-basics.html#model-synchro
nization.

Role Object / Enum
Path: /_helpers/role.js

The role object defines all the roles in the example application. I created it to
use like an enum to avoid passing roles around as strings, so instead of
'Admin' and 'User' we can use Role.Admin and Role.User.

Send Email Helper
Path: /_helpers/send-email.js

The send email helper is a lightweight wrapper around the nodemailer
module to simplify sending emails from anywhere in the application. It is
used by the account service to send account verification and password reset
emails.

Swagger API
(/api-docs)

Docs

Route

Handler

Path: /_helpers/swagger.js

The Swagger docs route handler uses the Swagger UI Express module to
serve auto-generated Swagger UI documentation based on the swagger.yaml

file from the /api-docs path of the api. The route handler is bound to the
/api-docs path in the main server.js file.

For more info on swagger-ui-express see
https://www.npmjs.com/package/swagger-ui-express.

Express.js Middleware Folder
Path: /_middleware

The middleware folder contains Express.js middleware functions that can be
used by different routes / features within the Node.js boilerplate api.

Authorize Middleware
Path: /_middleware/authorize.js

The authorized middleware can be added to any route to restrict access to
the route to authenticated users with specified roles. If the roles parameter is
omitted (i.e. authorize()) then the route will be accessible to all

authenticated users regardless of role. It is used by the accounts controller to
restrict access to account CRUD routes and revoke token routes.

The authorize function returns an array containing two middleware functions:

●​ The first (jwt({ ... })) authenticates the request by validating the
JWT access token in the "Authorization" header of the http request. On
successful authentication a user object is attached to the req object
that contains the data from the JWT token, which in this example
includes the user id (req.user.id).
●​ The second authorizes the request by checking that the authenticated
account still exists and is authorized to access the requested route
based on its role. The second middleware function also attaches the
role property and the ownsToken method to the req.user object so
they can be accessed by controller functions.

If either authentication or authorization fails then a 401 Unauthorized
response is returned.

Global Error Handler Middleware
Path: /_middleware/error-handler.js

The global error handler is used to catch all errors and remove the need for
duplicated error handling code throughout the boilerplate application. It's
configured as middleware in the main server.js file.

By convention errors of type 'string' are treated as custom (app specific)
errors, this simplifies the code for throwing custom errors since only a string
needs to be thrown (e.g. throw 'Invalid token'). Further to this if a custom
error ends with the words 'not found' a 404 response code is returned,
otherwise a standard 400 response is returned. See the account service for
some examples of custom errors thrown by the api, errors are caught in the
accounts controller for each route and passed to next(err) which passes
them to this global error handler.

Validate Request Middleware
Path: /_middleware/validate-request.js

The validate request middleware function validates the body of a request
against a Joi schema object.

It is used by schema middleware functions in controllers to validate the
request against the schema for a specific route (e.g. authenticateSchema in
the accounts controller).

Accounts Feature Folder
Path: /accounts

The accounts folder contains all code that is specific to the accounts feature of
the node.js + mysql boilerplate api.

Sequelize Account Model
Path: /accounts/account.model.js

The account model uses Sequelize to define the schema for the accounts
table in the MySQL database. The exported Sequelize model object gives full

access to perform CRUD (create, read, update, delete) operations on accounts
in MySQL, see the account service below for examples of it being used (via the
db helper).

Fields with the type DataTypes.VIRTUAL are sequelize virtual fields that are
not persisted in the database, they are convenience properties on the model
that can include multiple field values (e.g. isVerified).

The defaultScope configures the model to exclude the password hash from
query results by default. The withHash scope can be used to query accounts
and include the password hash field in results.

The one-to-many relationship between accounts and refresh tokens is
defined in the database wrapper.

Sequelize Refresh Token Model
Path: /accounts/refresh-token.model.js

The refresh token model uses Sequelize to define the schema for the
refreshTokens table in the MySQL database. The exported Sequelize model

object gives full access to perform CRUD (create, read, update, delete)
operations on refresh tokens in MySQL, see the account service below for
examples of it being used (via the db helper).

The DataTypes.VIRTUAL properties are convenience properties available on
the sequelize model that don't get persisted to the MySQL database.

The one-to-many relationship between accounts and refresh tokens is
defined in the database wrapper.

Account Service
Path: /accounts/account.service.js

The account service contains the core business logic for account sign up &
verification, authentication with JWT & refresh tokens, forgot password & reset
password functionality, as well as CRUD methods for managing account data.
The service encapsulates all interaction with the sequelize account models
and exposes a simple set of methods which are used by the accounts
controller.

The top of the file contains the exported service object with just the method
names to make it easy to see all the methods at a glance, the rest of the file
contains the implementation functions for each service method, followed by
local helper functions.

Express.js Accounts Controller
Path: /accounts/accounts.controller.js

The accounts controller defines all /accounts routes for the Node.js + MySQL
boilerplate api, the route definitions are grouped together at the top of the file
and the implementation functions are below, followed by local helper
functions. The controller is bound to the /accounts path in the main server.js
file.

Routes

that

require

authorization

include

the

middleware

function

authorize() and optionally specify a role (e.g. authorize(Role.Admin), if a role

is specified then the route is restricted to users in that role, otherwise the
route is restricted to all authenticated users regardless of role. The auth logic
is located in the authorize middleware.

The route functions revokeToken, getById, update and _delete include an
extra custom authorization check to prevent non-admin users from accessing
accounts other than their own. So regular user accounts (Role.User) have
CRUD access to their own account but not to others, and admin accounts
(Role.Admin) have full CRUD access to all accounts.

Routes that require schema validation include a middleware function with
the naming convention <route>Schema (e.g. authenticateSchema). Each
schema validation function defines a schema for the request body using the
Joi library and calls validateRequest(req, next, schema) to ensure the
request body is valid. If validation succeeds the request continues to the next
middleware function (the route function), otherwise an error is returned with

details of why validation failed. For more info about Joi schema validation see
https://www.npmjs.com/package/joi.

Express is the web server used by the boilerplate api, it's one of the most
popular web application frameworks for Node.js. For more info see
https://expressjs.com/.

Api Config
Path: /config.json

The api config file contains configuration data for the boilerplate api, it
includes the database connection options for the MySQL database, the
secret used for signing and verifying JWT tokens, the emailFrom address
used to send emails, and the smtpOptions used to connect and authenticate
with an email server.

Configure SMTP settings for email within the smtpOptions property. For
testing you can create a free account in one click at https://ethereal.email/ and
copy the options below the title Nodemailer configuration.

IMPORTANT: The secret property is used to sign and verify JWT tokens for
authentication, change it with your own random string to ensure nobody else
can generate a JWT with the same secret to gain unauthorized access to your
api. A quick and easy way is join a couple of GUIDs together to make a long
random string (e.g. from https://www.guidgenerator.com/).

Package.json
Path: /package.json

The package.json file contains project configuration information including
package dependencies which get installed when you run npm install.

The scripts section contains scripts that are executed by running the
command npm run <script name>, the start script can also be run with the
shortcut command npm start.

The start script starts the boilerplate api normally using node, and the
start:dev script starts the api in development mode using nodemon which
automatically restarts the server when a file is changed.

For more info see https://docs.npmjs.com/files/package.json.

Server Startup File
Path: /server.js

The server.js file is the entry point into the boilerplate Node.js api, it configures
application middleware, binds controllers to routes and starts the Express
web server for the api.

Swagger API Documentation
Path: /swagger.yaml

The Swagger YAML file describes the entire Node.js Boilerplate API using the
OpenAPI Specification format, it includes descriptions of all routes and HTTP
methods on each route, request and response schemas, path parameters,
and authentication methods.

The YAML documentation is used by the swagger.js helper to automatically
generate and serve interactive Swagger UI documentation on the /api-docs
route of the boilerplate api. To preview the Swagger UI documentation

without running the api simply copy and paste the below YAML into the
swagger editor at https://editor.swagger.io/.

File: swagger.yaml

Run the Node + MySQL Boilerplate API
Locally
1.​ Install NodeJS and NPM from https://nodejs.org/en/download/.
2.​ Install

MySQL

Community

https://dev.mysql.com/downloads/mysql/
Installation

instructions

and
are

Server
ensure

it

from
is

started.

available

at

https://dev.mysql.com/doc/refman/8.0/en/installing.html.
3.​ Project source code
4.​ Install all required npm packages by running npm install or npm i from
the command line in the project root folder (where the package.json is
located).
5.​ Configure SMTP settings for email within the smtpOptions property in
the /src/config.json file. For testing you can create a free account in
one click at https://ethereal.email/ and copy the options below the title
Nodemailer configuration.
6.​ Start the api by running npm start (or npm run start:dev to start with
nodemon) from the command line in the project root folder, you should

see the message Server listening on port 4000, and you can view
the Swagger API documentation at http://localhost:4000/api-docs.

Before running in production
Before running in production also make sure that you update the secret
property in the config.json file, it is used to sign and verify JWT tokens for
authentication, change it to a random string to ensure nobody else can
generate a JWT with the same secret and gain unauthorized access to your
api. A quick and easy way is join a couple of GUIDs together to make a long
random string (e.g. from https://www.guidgenerator.com/).

Test the Node.js Boilerplate API
How to register a new account with
Postman
To register a new account with the Node.js boilerplate api follow these steps:

1.​ Open a new request tab by clicking the plus (+) button at the end of the
tabs.
2.​ Change the http request method to "POST" with the dropdown selector
on the left of the URL input field.
3.​ In the URL field enter the address to the register route of your local API http://localhost:4000/accounts/register

4.​ Select the "Body" tab below the URL field, change the body type radio
button to "raw", and change the format dropdown selector to "JSON".
5.​ Enter a JSON object containing the required user properties in the
"Body" textarea, e.g:
6.​ Click the "Send" button, you should receive a "200 OK" response with a
"registration successful" message in the response body.

And this is a screenshot of the verification email received with the token to
verify the account:

How to verify an account with Postman
To verify an account with the Node api follow these steps:

1.​ Open a new request tab by clicking the plus (+) button at the end of the
tabs.
2.​ Change the http request method to "POST" with the dropdown selector
on the left of the URL input field.

3.​ In the URL field enter the address to the authenticate route of your local
API - http://localhost:4000/accounts/verify-email
4.​ Select the "Body" tab below the URL field, change the body type radio
button to "raw", and change the format dropdown selector to "JSON".
5.​ Enter a JSON object containing the token received in the verification
email (in the previous step) in the "Body" textarea, e.g:
6.​ Click the "Send" button, you should receive a "200 OK" response with a
"verification successful" message in the response body.

How to access an account if you forgot
the password
To re-enable access to an account with a forgotten password you need to
submit the email address of the account to the /account/forgot-password
route, the route will then send a token to the email which will allow you to
reset the password of the account in the next step.

Follow these steps in Postman if you forgot the password for an account:

1.​ Open a new request tab by clicking the plus (+) button at the end of the
tabs.
2.​ Change the http request method to "POST" with the dropdown selector
on the left of the URL input field.
3.​ In the URL field enter the address to the authenticate route of your local
API - http://localhost:4000/accounts/forgot-password
4.​ Select the "Body" tab below the URL field, change the body type radio
button to "raw", and change the format dropdown selector to "JSON".
5.​ Enter a JSON object containing the email of the account with the
forgotten password in the "Body" textarea, e.g:

6.​ Click the "Send" button, you should receive a "200 OK" response with
the message "Please check your email for password reset instructions"
in the response body.

And this is a screenshot of the email received with the token to reset the
password of the account:

How to reset the password of an
account with Postman
To reset the password of an account with the api follow these steps:

1.​ Open a new request tab by clicking the plus (+) button at the end of the
tabs.
2.​ Change the http request method to "POST" with the dropdown selector
on the left of the URL input field.
3.​ In the URL field enter the address to the authenticate route of your local
API - http://localhost:4000/accounts/reset-password

4.​ Select the "Body" tab below the URL field, change the body type radio
button to "raw", and change the format dropdown selector to "JSON".
5.​ Enter a JSON object containing the password reset token received in
the email from the forgot password step, along with a new password
and matching confirmPassword, into the "Body" textarea, e.g:

6.​ Click the "Send" button, you should receive a "200 OK" response with a
"password reset successful" message in the response body.

How to authenticate with Postman
To authenticate an account with the api and get a JWT token follow these
steps:

1.​ Open a new request tab by clicking the plus (+) button at the end of the
tabs.
2.​ Change the http request method to "POST" with the dropdown selector
on the left of the URL input field.
3.​ In the URL field enter the address to the authenticate route of your local
API - http://localhost:4000/accounts/authenticate
4.​ Select the "Body" tab below the URL field, change the body type radio
button to "raw", and change the format dropdown selector to "JSON".
5.​ Enter a JSON object containing the account email and password in the
"Body" textarea:

​

6.​ Click the "Send" button, you should receive a "200 OK" response with
the user details including a JWT token in the response body and a
refresh token in the response cookies.
7.​ Copy the JWT token value because we'll be using it in the next steps to
make authenticated requests.

And this is the response cookies tab with the refresh token:

How to get a list of all accounts with
Postman
This is a secure request that requires a JWT authentication token from the
authenticate step. The api route is restricted to admin users.

To get a list of all accounts from the Node boilerplate api follow these steps:

1.​ Open a new request tab by clicking the plus (+) button at the end of the
tabs.
2.​ Change the http request method to "GET" with the dropdown selector
on the left of the URL input field.
3.​ In the URL field enter the address to the users route of your local API http://localhost:4000/accounts

4.​ Select the "Authorization" tab below the URL field, change the type to
"Bearer Token" in the type dropdown selector, and paste the JWT token
from the previous authenticate step into the "Token" field.
5.​ Click the "Send" button, you should receive a "200 OK" response
containing a JSON array with all of the account records in the system.

Here's a screenshot of Postman after making an authenticated request to get
all accounts:

How to update an account with
Postman
This is a secure request that requires a JWT authentication token from the
authenticate step. Admin users can update any account including its role,
while regular users are restricted to their own account and cannot update
roles. Omitted or empty properties are not updated.

To update an account with the api follow these steps:

1.​ Open a new request tab by clicking the plus (+) button at the end of the
tabs.
2.​ Change the http request method to "PUT" with the dropdown selector
on the left of the URL input field.
3.​ In the URL field enter the address to the /accounts/{id} route with
the id of the account you want to update, e.g http://localhost:4000/accounts/1
4.​ Select the "Authorization" tab below the URL field, change the type to
"Bearer Token" in the type dropdown selector, and paste the JWT token
from the previous authenticate step into the "Token" field.
5.​ Select the "Body" tab below the URL field, change the body type radio
button to "raw", and change the format dropdown selector to "JSON".
6.​ Enter a JSON object in the "Body" textarea containing the properties
you want to update, for example to update the first and last names:

7.​ Click the "Send" button, you should receive a "200 OK" response with
the updated account details in the response body.

How to use a refresh token to get a
new JWT token
This step can only be done after the authenticate step because a valid refresh
token cookie is required.

To use a refresh token cookie to get a new JWT token and a new refresh token
follow these steps:

1.​ Open a new request tab by clicking the plus (+) button at the end of the
tabs.
2.​ Change the http request method to "POST" with the dropdown selector
on the left of the URL input field.
3.​ In the URL field enter the address to the refresh token route of your
local API - http://localhost:4000/accounts/refresh-token

4.​ Click the "Send" button, you should receive a "200 OK" response with
the account details including a new JWT token in the response body
and a new refresh token in the response cookies.
5.​ Copy the JWT token value because we'll be using it in the next steps to
make authenticated requests.

Here's a screenshot of Postman after the request is sent and the token has
been refreshed:

And this is the response cookies tab with the new refresh token:

